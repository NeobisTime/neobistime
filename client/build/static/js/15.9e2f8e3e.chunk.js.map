{"version":3,"sources":["images/shared/arrow.svg","components/pages/admin/admin-end-events/table/end-event-info.tsx"],"names":["module","exports","withNavbarContainer","withRouter","props","eventId","match","params","id","useState","peoples","setPeoples","console","log","eventData","setEventData","date","Date","start","currentPage","setCurrentPage","pageSize","totalProducts","setTotalProducts","next","setNext","useEffect","API","getEventPoll","then","data","results","count","getEventInfo","className","title","scope","map","poll","user","department","getDate","getMonth","getFullYear","onClick","was_on_event","patchMyEventPoll","newPoll","type","value","checked","src","arrow","style","transform","alt","window","location","reload"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,2GCuJ5BC,sBAAoBC,aAjJd,SAACC,GACpB,IAAMC,EAAUD,EAAME,MAAMC,OAAOC,GADA,EAELC,mBAAc,IAFT,mBAE5BC,EAF4B,KAEnBC,EAFmB,KAGnCC,QAAQC,IAAI,0BAA2BH,GAHJ,MAIDD,mBAAc,IAJb,mBAI5BK,EAJ4B,KAIjBC,EAJiB,KAK/BC,EAAO,IAAIC,KAAKH,EAAUI,OALK,EAOGT,mBAAS,GAPZ,mBAO5BU,EAP4B,KAOfC,EAPe,OAQHX,mBAAS,IARN,mBAQ5BY,EAR4B,aASOZ,mBAAS,IAThB,mBAS5Ba,EAT4B,KASbC,EATa,OAUXd,mBAAwB,IAVb,mBAU5Be,EAV4B,KAUtBC,EAVsB,KA0BnC,OAdAC,qBAAU,WACRC,IAAIC,aAAavB,EAASgB,EAAUA,EAAWF,GAAaU,MAAK,SAACC,GAChEnB,EAAWmB,EAAKA,KAAKC,SACrBR,EAAiBO,EAAKA,KAAKE,OAC3BP,EAAQK,EAAKA,KAAKN,WAEnB,CAACL,IAEJO,qBAAU,WACRC,IAAIM,aAAa5B,GAASwB,MAAK,SAACC,GAC9Bf,EAAae,EAAKA,WAEnB,IAGD,oCACE,yBAAKI,UAAU,kBACb,6BACE,uBAAGA,UAAU,yBAAb,2GACsBpB,EAAUqB,OAEhC,2BAAOD,UAAU,yBACf,8BAAUA,UAAU,kCAClB,yBAAK1B,GAAG,WACR,yBAAKA,GAAG,eACR,yBAAKA,GAAG,SACR,yBAAKA,GAAG,YAEV,2BAAO0B,UAAU,+BACf,4BACE,wBAAIE,MAAM,OAAV,wCACA,wBAAIA,MAAM,OAAV,sEACA,wBAAIA,MAAM,OAAV,4BACA,wBAAIA,MAAM,OAAV,0CAGJ,2BAAOF,UAAU,+BACdxB,EACCA,EAAQ2B,KAAI,SAACC,GACX,OACE,4BACE,wBAAIJ,UAAU,QAAQI,EAAKC,MAC3B,wBAAIL,UAAU,QAAQI,EAAKE,YAC3B,wBAAIN,UAAU,oCACXlB,EAAKyB,UADR,IACoBzB,EAAK0B,WAAa,EADtC,IAEG1B,EAAK2B,eAER,4BACE,2BACEC,QAAS,WACP,IAAMd,EAAO,CACXe,cAAeP,EAAKO,cAEtBlB,IAAImB,iBAAiBzC,EAASiC,EAAK9B,GAAIsB,GAAMD,MAC3C,SAACC,GAEC,IAAIiB,EAAUjB,EAAKA,KACnBnB,EACED,EAAQ2B,KAAI,SAACC,GAIX,OAHKA,EAAK9B,MAAQuC,EAAQvC,KACxB8B,EAAOS,GAEFT,UAMjBU,KAAK,WACLC,MAAOX,EAAKO,aACZK,QAASZ,EAAKO,oBAOxB,4BACE,wBAAIX,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,qCAKR,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,sCACb,yBACEA,UAAU,2CACViB,IAAKC,IACLC,MAAO,CAAEC,UAAW,kBACpBC,IAAI,QACJX,QAAS,WACP,OAAOzB,EAAc,EACjBC,EAAeD,EAAc,GAC7B,QAGR,0BAAMe,UAAU,wCACbf,EAAcE,EAAW,EAD5B,IAEGF,EAAcE,EAAWA,EAAWC,EACjCA,EACAH,EAAcE,EAAWA,EAAU,IAJzC,QAMQ,IAlBV,MAmBMC,EACJ,yBACEY,UAAU,2CACViB,IAAKC,IACLG,IAAI,QACJX,QAAS,WACP,OAAOpB,EAAOJ,EAAeD,EAAc,GAAK,YAO5D,yBAAKe,UAAU,0BACb,4BACEA,UAAU,uCACVU,QAAS,WACPY,OAAOC,SAASC,QAAO,KAH3B,+DAaqD","file":"static/js/15.9e2f8e3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.f37f2ac4.svg\";","import React, { useState, useEffect } from \"react\";\nimport arrow from \"../../../../../images/shared/arrow.svg\";\nimport withNavbarContainer from \"../../../../../HOC/withNavbar\";\nimport API from \"../../../../../API\";\nimport { withRouter } from \"react-router-dom\";\n\nconst EndEventInfo = (props: any) => {\n  const eventId = props.match.params.id;\n  const [peoples, setPeoples] = useState<any>([]);\n  console.log(\"EndEventInfo -> peoples\", peoples);\n  const [eventData, setEventData] = useState<any>([]);\n  let date = new Date(eventData.start);\n\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [next, setNext] = useState<string | null>(\"\");\n\n  useEffect(() => {\n    API.getEventPoll(eventId, pageSize, pageSize * currentPage).then((data) => {\n      setPeoples(data.data.results);\n      setTotalProducts(data.data.count);\n      setNext(data.data.next);\n    });\n  }, [currentPage]);\n\n  useEffect(() => {\n    API.getEventInfo(eventId).then((data) => {\n      setEventData(data.data);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"end-event-info\">\n        <div>\n          <p className=\"end-event-info__title\">\n            Отчет посещаемости {eventData.title}\n          </p>\n          <table className=\"end-event-info__table\">\n            <colgroup className=\"end-event-info__table-colgroup\">\n              <col id=\"person\" />\n              <col id=\"department\" />\n              <col id=\"date\" />\n              <col id=\"status\" />\n            </colgroup>\n            <thead className=\"end-event-info__table-thead\">\n              <tr>\n                <th scope=\"col\">Мэмбер</th>\n                <th scope=\"col\">Департамент</th>\n                <th scope=\"col\">Дата</th>\n                <th scope=\"col\">Статус</th>\n              </tr>\n            </thead>\n            <tbody className=\"end-event-info__table-tbody\">\n              {peoples ? (\n                peoples.map((poll: any) => {\n                  return (\n                    <tr>\n                      <td className=\"bold\">{poll.user}</td>\n                      <td className=\"bold\">{poll.department}</td>\n                      <td className=\"end-event-info__table-tbody-date\">\n                        {date.getDate()}/{date.getMonth() + 1}/\n                        {date.getFullYear()}\n                      </td>\n                      <td>\n                        <input\n                          onClick={() => {\n                            const data = {\n                              was_on_event: !poll.was_on_event,\n                            };\n                            API.patchMyEventPoll(eventId, poll.id, data).then(\n                              (data) => {\n                                // update poll data in peoples\n                                let newPoll = data.data;\n                                setPeoples(\n                                  peoples.map((poll: any) => {\n                                    if (+poll.id === +newPoll.id) {\n                                      poll = newPoll;\n                                    }\n                                    return poll;\n                                  })\n                                );\n                              }\n                            );\n                          }}\n                          type=\"checkbox\"\n                          value={poll.was_on_event}\n                          checked={poll.was_on_event}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })\n              ) : (\n                <tr>\n                  <td className=\"bold\">пусто</td>\n                  <td className=\"bold\">пусто</td>\n                  <td className=\"bold\">пусто</td>\n                  <td className=\"bold\">пусто</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n          <div className=\"end-event-info__pagination\">\n            <div className=\"end-event-info__pagination-buttons\">\n              <img\n                className=\"end-event-info__pagination-buttons-image\"\n                src={arrow}\n                style={{ transform: \"rotate(180deg)\" }}\n                alt=\"arrow\"\n                onClick={() => {\n                  return currentPage > 0\n                    ? setCurrentPage(currentPage - 1)\n                    : null;\n                }}\n              />\n              <span className=\"end-event-info__pagination-text_bold\">\n                {currentPage * pageSize + 1}-\n                {currentPage * pageSize + pageSize > totalProducts\n                  ? totalProducts\n                  : currentPage * pageSize + pageSize}{\" \"}\n                &nbsp;\n              </span>{\" \"}\n              of {totalProducts}\n              <img\n                className=\"end-event-info__pagination-buttons-image\"\n                src={arrow}\n                alt=\"arrow\"\n                onClick={() => {\n                  return next ? setCurrentPage(currentPage + 1) : null;\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"end-event-info__submit\">\n        <button\n          className=\"end-event-info__submit-button button\"\n          onClick={() => {\n            window.location.reload(true);\n          }}\n        >\n          Сохранить\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default withNavbarContainer(withRouter(EndEventInfo), \"admin\");\n"],"sourceRoot":""}