{"version":3,"sources":["images/shared/arrow.svg","components/pages/admin/admin-end-events/table/end-event-info.tsx"],"names":["module","exports","withNavbarContainer","withRouter","props","eventId","match","params","id","useState","peoples","setPeoples","console","log","eventData","setEventData","date","Date","start","currentPage","setCurrentPage","pageSize","totalProducts","setTotalProducts","next","setNext","useEffect","API","getEventPoll","then","data","results","count","getEventInfo","className","title","scope","map","poll","user","department","getDate","getMonth","getFullYear","onClick","was_on_event","patchMyEventPoll","newPoll","type","value","checked","src","arrow","style","transform","alt","window","location","reload"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,2GCuJ5BC,sBAAoBC,aAjJd,SAACC,GACpB,IAAMC,EAAUD,EAAME,MAAMC,OAAOC,GADA,EAELC,mBAAc,IAFT,mBAE5BC,EAF4B,KAEnBC,EAFmB,KAGnCC,QAAQC,IAAI,0BAA2BH,GAHJ,MAIDD,mBAAc,IAJb,mBAI5BK,EAJ4B,KAIjBC,EAJiB,KAK/BC,EAAO,IAAIC,KAAKH,EAAUI,OALK,EAOGT,mBAAS,GAPZ,mBAO5BU,EAP4B,KAOfC,EAPe,OAQHX,mBAAS,IARN,mBAQ5BY,EAR4B,aASOZ,mBAAS,IAThB,mBAS5Ba,EAT4B,KASbC,EATa,OAUXd,mBAAwB,IAVb,mBAU5Be,EAV4B,KAUtBC,EAVsB,KA0BnC,OAdAC,qBAAU,WACRC,IAAIC,aAAavB,EAASgB,EAAUA,EAAWF,GAAaU,MAAK,SAACC,GAChEnB,EAAWmB,EAAKA,KAAKC,SACrBR,EAAiBO,EAAKA,KAAKE,OAC3BP,EAAQK,EAAKA,KAAKN,WAEnB,CAACL,IAEJO,qBAAU,WACRC,IAAIM,aAAa5B,GAASwB,MAAK,SAACC,GAC9Bf,EAAae,EAAKA,WAEnB,IAGD,oCACE,yBAAKI,UAAU,kBACb,6BACE,uBAAGA,UAAU,yBAAb,2GACsBpB,EAAUqB,OAEhC,2BAAOD,UAAU,yBACf,8BAAUA,UAAU,kCAClB,yBAAK1B,GAAG,WACR,yBAAKA,GAAG,eACR,yBAAKA,GAAG,SACR,yBAAKA,GAAG,YAEV,2BAAO0B,UAAU,+BACf,4BACE,wBAAIE,MAAM,OAAV,wCACA,wBAAIA,MAAM,OAAV,sEACA,wBAAIA,MAAM,OAAV,4BACA,wBAAIA,MAAM,OAAV,0CAGJ,2BAAOF,UAAU,+BACdxB,EACCA,EAAQ2B,KAAI,SAACC,GACX,OACE,4BACE,wBAAIJ,UAAU,QAAQI,EAAKC,MAC3B,wBAAIL,UAAU,QAAQI,EAAKE,YAC3B,wBAAIN,UAAU,oCACXlB,EAAKyB,UADR,IACoBzB,EAAK0B,WAAa,EADtC,IAEG1B,EAAK2B,eAER,4BACE,2BACEC,QAAS,WACP,IAAMd,EAAO,CACXe,cAAeP,EAAKO,cAEtBlB,IAAImB,iBAAiBzC,EAASiC,EAAK9B,GAAIsB,GAAMD,MAC3C,SAACC,GAEC,IAAIiB,EAAUjB,EAAKA,KACnBnB,EACED,EAAQ2B,KAAI,SAACC,GAIX,OAHKA,EAAK9B,MAAQuC,EAAQvC,KACxB8B,EAAOS,GAEFT,UAMjBU,KAAK,WACLC,MAAOX,EAAKO,aACZK,QAASZ,EAAKO,oBAOxB,4BACE,wBAAIX,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,kCACA,wBAAIA,UAAU,QAAd,qCAKR,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,sCACb,yBACEA,UAAU,2CACViB,IAAKC,IACLC,MAAO,CAAEC,UAAW,kBACpBC,IAAI,QACJX,QAAS,WACP,OAAOzB,EAAc,EACjBC,EAAeD,EAAc,GAC7B,QAGR,0BAAMe,UAAU,wCACbf,EAAcE,EAAW,EAD5B,IAEGF,EAAcE,EAAWA,EAAWC,EACjCA,EACAH,EAAcE,EAAWA,EAAU,IAJzC,QAMQ,IAlBV,MAmBMC,EACJ,yBACEY,UAAU,2CACViB,IAAKC,IACLG,IAAI,QACJX,QAAS,WACP,OAAOpB,EAAOJ,EAAeD,EAAc,GAAK,YAO5D,yBAAKe,UAAU,0BACb,4BACEA,UAAU,uCACVU,QAAS,WACPY,OAAOC,SAASC,QAAO,KAH3B,+DAaqD","file":"static/js/16.bbd5adf7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.f37f2ac4.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport arrow from \"../../../../../images/shared/arrow.svg\";\r\nimport withNavbarContainer from \"../../../../../HOC/withNavbar\";\r\nimport API from \"../../../../../API\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst EndEventInfo = (props: any) => {\r\n  const eventId = props.match.params.id;\r\n  const [peoples, setPeoples] = useState<any>([]);\r\n  console.log(\"EndEventInfo -> peoples\", peoples);\r\n  const [eventData, setEventData] = useState<any>([]);\r\n  let date = new Date(eventData.start);\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [totalProducts, setTotalProducts] = useState(0);\r\n  const [next, setNext] = useState<string | null>(\"\");\r\n\r\n  useEffect(() => {\r\n    API.getEventPoll(eventId, pageSize, pageSize * currentPage).then((data) => {\r\n      setPeoples(data.data.results);\r\n      setTotalProducts(data.data.count);\r\n      setNext(data.data.next);\r\n    });\r\n  }, [currentPage]);\r\n\r\n  useEffect(() => {\r\n    API.getEventInfo(eventId).then((data) => {\r\n      setEventData(data.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"end-event-info\">\r\n        <div>\r\n          <p className=\"end-event-info__title\">\r\n            Отчет посещаемости {eventData.title}\r\n          </p>\r\n          <table className=\"end-event-info__table\">\r\n            <colgroup className=\"end-event-info__table-colgroup\">\r\n              <col id=\"person\" />\r\n              <col id=\"department\" />\r\n              <col id=\"date\" />\r\n              <col id=\"status\" />\r\n            </colgroup>\r\n            <thead className=\"end-event-info__table-thead\">\r\n              <tr>\r\n                <th scope=\"col\">Мэмбер</th>\r\n                <th scope=\"col\">Департамент</th>\r\n                <th scope=\"col\">Дата</th>\r\n                <th scope=\"col\">Статус</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"end-event-info__table-tbody\">\r\n              {peoples ? (\r\n                peoples.map((poll: any) => {\r\n                  return (\r\n                    <tr>\r\n                      <td className=\"bold\">{poll.user}</td>\r\n                      <td className=\"bold\">{poll.department}</td>\r\n                      <td className=\"end-event-info__table-tbody-date\">\r\n                        {date.getDate()}/{date.getMonth() + 1}/\r\n                        {date.getFullYear()}\r\n                      </td>\r\n                      <td>\r\n                        <input\r\n                          onClick={() => {\r\n                            const data = {\r\n                              was_on_event: !poll.was_on_event,\r\n                            };\r\n                            API.patchMyEventPoll(eventId, poll.id, data).then(\r\n                              (data) => {\r\n                                // update poll data in peoples\r\n                                let newPoll = data.data;\r\n                                setPeoples(\r\n                                  peoples.map((poll: any) => {\r\n                                    if (+poll.id === +newPoll.id) {\r\n                                      poll = newPoll;\r\n                                    }\r\n                                    return poll;\r\n                                  })\r\n                                );\r\n                              }\r\n                            );\r\n                          }}\r\n                          type=\"checkbox\"\r\n                          value={poll.was_on_event}\r\n                          checked={poll.was_on_event}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              ) : (\r\n                <tr>\r\n                  <td className=\"bold\">пусто</td>\r\n                  <td className=\"bold\">пусто</td>\r\n                  <td className=\"bold\">пусто</td>\r\n                  <td className=\"bold\">пусто</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"end-event-info__pagination\">\r\n            <div className=\"end-event-info__pagination-buttons\">\r\n              <img\r\n                className=\"end-event-info__pagination-buttons-image\"\r\n                src={arrow}\r\n                style={{ transform: \"rotate(180deg)\" }}\r\n                alt=\"arrow\"\r\n                onClick={() => {\r\n                  return currentPage > 0\r\n                    ? setCurrentPage(currentPage - 1)\r\n                    : null;\r\n                }}\r\n              />\r\n              <span className=\"end-event-info__pagination-text_bold\">\r\n                {currentPage * pageSize + 1}-\r\n                {currentPage * pageSize + pageSize > totalProducts\r\n                  ? totalProducts\r\n                  : currentPage * pageSize + pageSize}{\" \"}\r\n                &nbsp;\r\n              </span>{\" \"}\r\n              of {totalProducts}\r\n              <img\r\n                className=\"end-event-info__pagination-buttons-image\"\r\n                src={arrow}\r\n                alt=\"arrow\"\r\n                onClick={() => {\r\n                  return next ? setCurrentPage(currentPage + 1) : null;\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"end-event-info__submit\">\r\n        <button\r\n          className=\"end-event-info__submit-button button\"\r\n          onClick={() => {\r\n            window.location.reload(true);\r\n          }}\r\n        >\r\n          Сохранить\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withNavbarContainer(withRouter(EndEventInfo), \"admin\");\r\n"],"sourceRoot":""}