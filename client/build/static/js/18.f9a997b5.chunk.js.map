{"version":3,"sources":["images/pages/event-info-default.png","components/pages/single-event-info/single-event-info.tsx"],"names":["module","exports","months","withNavbarContainer","withDataContainer","withRouter","props","eventId","match","params","id","useState","eventData","setEventData","correctPollId","setCorrectPollId","address","setAddress","willGo","setwillGo","willNotGo","setwillNotGo","finalAnswer","setFinalAnswer","rejectionReason","setRejectionReason","missedDeadline","setMissedDeadline","startDate","Date","start","deadline","today","useEffect","API","getEventInfo","then","data","place","getMyPoll","correctPoll","filter","poll","event","title","answer","rejection_reason","getTime","alertType","setAlertType","alertText","setAlertText","isAlertOpen","setIsAlertOpen","openAlert","response","status","setTimeout","className","style","fontWeight","getHours","getMinutes","days","getDay","monthListRus","getMonth","getDate","description","src","addressImage","alt","name","onSubmit","e","preventDefault","patchPoll","catch","error","request","postPoll","type","checked","onChange","rows","placeholder","disabled","value","target","image","preview","text","onClose"],"mappings":"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","file":"static/js/18.f9a997b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/event-info-default.8b7e2246.png\";","import React, { useState, useEffect } from \"react\";\r\nimport preview from \"../../../images/pages/event-info-default.png\";\r\nimport addressImage from \"../../../images/pages/address.svg\";\r\nimport withNavbarContainer from \"../../../HOC/withNavbar\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport API from \"../../../API\";\r\nimport withDataContainer from \"../../../HOC/withData\";\r\nimport Alert from \"../../shared/alert\";\r\n\r\nlet days = [\r\n  \"Воскресенье\",\r\n  \"Понедельник\",\r\n  \"Вторник\",\r\n  \"Среда\",\r\n  \"Четверг\",\r\n  \"Пятница\",\r\n  \"Суббота\",\r\n];\r\nlet months = [\r\n  \"Январь\",\r\n  \"Февраль\",\r\n  \"Март\",\r\n  \"Апрель\",\r\n  \"Май\",\r\n  \"Июнь\",\r\n  \"Июль\",\r\n  \"Август\",\r\n  \"Cентябрь\",\r\n  \"Октябрь\",\r\n  \"Ноябрь\",\r\n  \"Декабрь\",\r\n];\r\n\r\nconst EventInfo = (props: any) => {\r\n  const eventId = props.match.params.id;\r\n  const [eventData, setEventData] = useState<any>({});\r\n  const [correctPollId, setCorrectPollId] = useState<any>(0);\r\n  const [address, setAddress] = useState<any>({});\r\n\r\n  const [willGo, setwillGo] = useState<boolean | undefined>(false);\r\n  const [willNotGo, setwillNotGo] = useState<boolean | undefined>(false);\r\n  const [finalAnswer, setFinalAnswer] = useState<boolean>(false);\r\n  const [rejectionReason, setRejectionReason] = useState(\"\");\r\n  const [missedDeadline, setMissedDeadline] = useState(false);\r\n\r\n  let startDate = new Date(eventData.start);\r\n  let deadline = new Date(eventData.deadline);\r\n  let today = new Date();\r\n\r\n  const handlewillGo = () => {\r\n    setwillGo(true);\r\n    setwillNotGo(false);\r\n    setFinalAnswer(true);\r\n    setRejectionReason(\"\");\r\n  };\r\n  const handlewillNotGo = () => {\r\n    setwillGo(false);\r\n    setwillNotGo(true);\r\n    setFinalAnswer(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    API.getEventInfo(eventId).then((eventData) => {\r\n      setEventData(eventData.data);\r\n      setAddress(eventData.data.place);\r\n\r\n      // get data to poll if it exist\r\n      API.getMyPoll().then((data) => {\r\n        if (data.data) {\r\n          let correctPoll: any = [];\r\n          correctPoll = data.data.filter((poll: any) => {\r\n            return poll.event === eventData.data.title;\r\n          });\r\n          // if exist fill correct data in inputs\r\n          if (correctPoll[0]) {\r\n            correctPoll[0].answer ? setwillGo(true) : setwillNotGo(true);\r\n            setRejectionReason(correctPoll[0].rejection_reason);\r\n            setCorrectPollId(correctPoll[0].id);\r\n          }\r\n        }\r\n      });\r\n\r\n      // disable input if deadline crossed\r\n      let deadline = new Date(eventData.data.deadline);\r\n      if (+today.getTime() > +deadline.getTime()) {\r\n        setMissedDeadline(true);\r\n      } else {\r\n        setMissedDeadline(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const [alertType, setAlertType] = useState(\"success\");\r\n  const [alertText, setAlertText] = useState(\"\");\r\n  let [isAlertOpen, setIsAlertOpen] = useState<boolean>(false);\r\n  const toggleAlertOpen = () => {\r\n    setIsAlertOpen(!isAlertOpen);\r\n  };\r\n  const openAlert = (response: any) => {\r\n    if (response.status >= 200 && response.status <= 299) {\r\n      setAlertType(\"success\");\r\n      setAlertText(\"Все прошло без ошибок\");\r\n    } else {\r\n      setAlertType(\"error\");\r\n      setAlertText(response.response || \"непредвиденная ошибка\");\r\n    }\r\n    setIsAlertOpen(true);\r\n    setTimeout(() => {\r\n      setIsAlertOpen(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      event: eventId,\r\n      answer: finalAnswer,\r\n      rejection_reason: rejectionReason,\r\n    };\r\n    if (correctPollId) {\r\n      API.patchPoll(data, correctPollId)\r\n        .then((response) => {\r\n          openAlert(response);\r\n        })\r\n        .catch((error) => {\r\n          openAlert(error.request);\r\n        });\r\n    } else {\r\n      API.postPoll(data).then((data) => {\r\n        setCorrectPollId(data.data.id);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"event-info\">\r\n        <div className=\"event-info__content\">\r\n          <p className=\"event-info__content-title\">{eventData.title}</p>\r\n          <p className=\"event-info__content-date\" style={{fontWeight: 'bold'}}>\r\n            {startDate.getHours()}.\r\n            {(startDate.getMinutes() < 10 ? \"0\" : \"\") + startDate.getMinutes()}{\" \"}\r\n            {props.days[startDate.getDay()]},{\" \"}\r\n            {props.monthListRus[startDate.getMonth()]} {startDate.getDate()}\r\n          </p>\r\n          <p className=\"event-info__content-description\">\r\n            {eventData.description}\r\n          </p>\r\n          <p className=\"event-info__content-address\" style={{fontWeight: 'bold'}}>\r\n            <img\r\n              className=\"event-info__content-address-image\"\r\n              src={addressImage}\r\n              alt=\"address\"\r\n            />\r\n            Адрес: {address.name} {eventData.address}\r\n          </p>\r\n          <p className=\"event-info__content-text_m_t\">\r\n            Примите ли вы участие в данном событии?\r\n          </p>\r\n          <p className=\"event-info__content-text_deadline\">\r\n            deadline: {deadline.getDate()} {months[deadline.getMonth()]}{\" \"}\r\n            {deadline.getHours()}:\r\n            {(deadline.getMinutes() < 10 ? \"0\" : \"\") + deadline.getMinutes()}\r\n          </p>\r\n          {missedDeadline ? (\r\n            <p className=\"event-info__content-text_big_red\">\r\n              К СОЖАЛЕНИЮ, ВЫ ПРОПУСТИЛИ ДЭДЛАЙН\r\n            </p>\r\n          ) : (\r\n            <form className=\"event-info__content-form\" onSubmit={handleSubmit}>\r\n              <label className=\"event-info-modal__label\">\r\n                Да\r\n                <input\r\n                  className=\"event-info-modal__input\"\r\n                  type=\"checkbox\"\r\n                  checked={willGo}\r\n                  onChange={handlewillGo}\r\n                />\r\n                <span className=\"event-info-modal__checkmark\"></span>\r\n              </label>\r\n              <label className=\"event-info-modal__label\">\r\n                Нет\r\n                <input\r\n                  className=\"event-info-modal__input\"\r\n                  type=\"checkbox\"\r\n                  checked={willNotGo}\r\n                  onChange={handlewillNotGo}\r\n                />\r\n                <span className=\"event-info-modal__checkmark\"></span>\r\n              </label>\r\n              <p className=\"event-info__content-text\">\r\n                Если нет, то укажите причину:\r\n              </p>\r\n              <textarea\r\n                // cols={50}\r\n                rows={4}\r\n                placeholder=\"Ваш ответ...\"\r\n                disabled={willGo ? true : false}\r\n                id=\"event-info__textarea-disabled\"\r\n                className=\"event-info__content-form-textarea\"\r\n                value={rejectionReason}\r\n                onChange={(e) => {\r\n                  setRejectionReason(e.target.value);\r\n                }}\r\n              />\r\n              <button type=\"submit\" className=\"event-info__content-form-submit\">\r\n                Отправить\r\n              </button>\r\n            </form>\r\n          )}\r\n        </div>\r\n        <div className=\"event-info__content tablet-none\">\r\n          <img\r\n            src={eventData.image || preview}\r\n            alt=\"event\"\r\n            className=\"event-info__content-right-image\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {isAlertOpen && (\r\n        <Alert type={alertType} text={alertText} onClose={toggleAlertOpen} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withNavbarContainer(withDataContainer(withRouter(EventInfo)));\r\n"],"sourceRoot":""}